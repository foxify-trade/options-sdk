/* tslint:disable */
/* eslint-disable */
/**
 * options-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AutoResolveSnapshotEntityDto
 */
export interface AutoResolveSnapshotEntityDto {
    /**
     * 
     * @type {number}
     * @memberof AutoResolveSnapshotEntityDto
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof AutoResolveSnapshotEntityDto
     */
    'protocolStableFee': string;
    /**
     * 
     * @type {string}
     * @memberof AutoResolveSnapshotEntityDto
     */
    'autoResolveFee': string;
    /**
     * 
     * @type {string}
     * @memberof AutoResolveSnapshotEntityDto
     */
    'txHash': string;
    /**
     * 
     * @type {string}
     * @memberof AutoResolveSnapshotEntityDto
     */
    'orderAvailable': string;
    /**
     * 
     * @type {boolean}
     * @memberof AutoResolveSnapshotEntityDto
     */
    'accountedInStats': boolean;
}
/**
 * 
 * @export
 * @interface GetExternalOrdersResponseDto
 */
export interface GetExternalOrdersResponseDto {
    /**
     * 
     * @type {number}
     * @memberof GetExternalOrdersResponseDto
     */
    'orderId': number;
    /**
     * 
     * @type {string}
     * @memberof GetExternalOrdersResponseDto
     */
    'amount': string;
    /**
     * 
     * @type {string}
     * @memberof GetExternalOrdersResponseDto
     */
    'available': string;
    /**
     * 
     * @type {string}
     * @memberof GetExternalOrdersResponseDto
     */
    'percent': string;
    /**
     * 
     * @type {string}
     * @memberof GetExternalOrdersResponseDto
     */
    'rate': string;
    /**
     * 
     * @type {string}
     * @memberof GetExternalOrdersResponseDto
     */
    'duration': string;
}
/**
 * 
 * @export
 * @interface GetOracleDto
 */
export interface GetOracleDto {
    /**
     * 
     * @type {number}
     * @memberof GetOracleDto
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof GetOracleDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof GetOracleDto
     */
    'address': string;
    /**
     * 
     * @type {string}
     * @memberof GetOracleDto
     */
    'price': string;
    /**
     * 
     * @type {number}
     * @memberof GetOracleDto
     */
    'decimals': number;
}
/**
 * 
 * @export
 * @interface GetOrderDto
 */
export interface GetOrderDto {
    /**
     * 
     * @type {number}
     * @memberof GetOrderDto
     */
    'id': number;
    /**
     * 
     * @type {number}
     * @memberof GetOrderDto
     */
    'chainId': number;
    /**
     * 
     * @type {number}
     * @memberof GetOrderDto
     */
    'orderId': number;
    /**
     * 
     * @type {string}
     * @memberof GetOrderDto
     */
    'creator': string;
    /**
     * 
     * @type {string}
     * @memberof GetOrderDto
     */
    'amount': string;
    /**
     * 
     * @type {string}
     * @memberof GetOrderDto
     */
    'reserved': string;
    /**
     * 
     * @type {string}
     * @memberof GetOrderDto
     */
    'available': string;
    /**
     * 
     * @type {boolean}
     * @memberof GetOrderDto
     */
    'closed': boolean;
    /**
     * 
     * @type {string}
     * @memberof GetOrderDto
     */
    'percent': string;
    /**
     * 
     * @type {string}
     * @memberof GetOrderDto
     */
    'direction': GetOrderDtoDirectionEnum;
    /**
     * 
     * @type {string}
     * @memberof GetOrderDto
     */
    'rate': string;
    /**
     * 
     * @type {string}
     * @memberof GetOrderDto
     */
    'duration': string;
    /**
     * 
     * @type {number}
     * @memberof GetOrderDto
     */
    'oracleId': number;
    /**
     * 
     * @type {boolean}
     * @memberof GetOrderDto
     */
    'reinvest': boolean;
    /**
     * 
     * @type {OracleEntityDto}
     * @memberof GetOrderDto
     */
    'oracle': OracleEntityDto;
}

export const GetOrderDtoDirectionEnum = {
    Up: 'up',
    Down: 'down'
} as const;

export type GetOrderDtoDirectionEnum = typeof GetOrderDtoDirectionEnum[keyof typeof GetOrderDtoDirectionEnum];

/**
 * 
 * @export
 * @interface GetStatsChartResponseDto
 */
export interface GetStatsChartResponseDto {
    /**
     * 
     * @type {Array<WalletStatsChartViewEntityDto>}
     * @memberof GetStatsChartResponseDto
     */
    'items'?: Array<WalletStatsChartViewEntityDto>;
}
/**
 * 
 * @export
 * @interface GetStatsResponseDto
 */
export interface GetStatsResponseDto {
    /**
     * 
     * @type {string}
     * @memberof GetStatsResponseDto
     */
    'address': string;
    /**
     * 
     * @type {string}
     * @memberof GetStatsResponseDto
     */
    'pending': string;
    /**
     * 
     * @type {string}
     * @memberof GetStatsResponseDto
     */
    'executed': string;
    /**
     * 
     * @type {string}
     * @memberof GetStatsResponseDto
     */
    'canceled': string;
    /**
     * 
     * @type {string}
     * @memberof GetStatsResponseDto
     */
    'total': string;
    /**
     * 
     * @type {string}
     * @memberof GetStatsResponseDto
     */
    'won': string;
    /**
     * 
     * @type {string}
     * @memberof GetStatsResponseDto
     */
    'lost': string;
    /**
     * 
     * @type {string}
     * @memberof GetStatsResponseDto
     */
    'wonSum': string;
    /**
     * 
     * @type {string}
     * @memberof GetStatsResponseDto
     */
    'lostSum': string;
    /**
     * 
     * @type {string}
     * @memberof GetStatsResponseDto
     */
    'profit': string;
    /**
     * 
     * @type {string}
     * @memberof GetStatsResponseDto
     */
    'rank': string;
}
/**
 * 
 * @export
 * @interface GetTeamStatsTopResponseDto
 */
export interface GetTeamStatsTopResponseDto {
    /**
     * 
     * @type {Array<TeamStatsItem>}
     * @memberof GetTeamStatsTopResponseDto
     */
    'items': Array<TeamStatsItem>;
}
/**
 * 
 * @export
 * @interface HealthControllerCheck200Response
 */
export interface HealthControllerCheck200Response {
    /**
     * 
     * @type {string}
     * @memberof HealthControllerCheck200Response
     */
    'status'?: string;
    /**
     * 
     * @type {{ [key: string]: HealthControllerCheck200ResponseInfoValue; }}
     * @memberof HealthControllerCheck200Response
     */
    'info'?: { [key: string]: HealthControllerCheck200ResponseInfoValue; } | null;
    /**
     * 
     * @type {{ [key: string]: HealthControllerCheck200ResponseInfoValue; }}
     * @memberof HealthControllerCheck200Response
     */
    'error'?: { [key: string]: HealthControllerCheck200ResponseInfoValue; } | null;
    /**
     * 
     * @type {{ [key: string]: HealthControllerCheck200ResponseInfoValue; }}
     * @memberof HealthControllerCheck200Response
     */
    'details'?: { [key: string]: HealthControllerCheck200ResponseInfoValue; };
}
/**
 * 
 * @export
 * @interface HealthControllerCheck200ResponseInfoValue
 */
export interface HealthControllerCheck200ResponseInfoValue {
    [key: string]: string | any;

    /**
     * 
     * @type {string}
     * @memberof HealthControllerCheck200ResponseInfoValue
     */
    'status'?: string;
}
/**
 * 
 * @export
 * @interface HealthControllerCheck503Response
 */
export interface HealthControllerCheck503Response {
    /**
     * 
     * @type {string}
     * @memberof HealthControllerCheck503Response
     */
    'status'?: string;
    /**
     * 
     * @type {{ [key: string]: HealthControllerCheck200ResponseInfoValue; }}
     * @memberof HealthControllerCheck503Response
     */
    'info'?: { [key: string]: HealthControllerCheck200ResponseInfoValue; } | null;
    /**
     * 
     * @type {{ [key: string]: HealthControllerCheck200ResponseInfoValue; }}
     * @memberof HealthControllerCheck503Response
     */
    'error'?: { [key: string]: HealthControllerCheck200ResponseInfoValue; } | null;
    /**
     * 
     * @type {{ [key: string]: HealthControllerCheck200ResponseInfoValue; }}
     * @memberof HealthControllerCheck503Response
     */
    'details'?: { [key: string]: HealthControllerCheck200ResponseInfoValue; };
}
/**
 * 
 * @export
 * @interface OracleEntityDto
 */
export interface OracleEntityDto {
    /**
     * 
     * @type {number}
     * @memberof OracleEntityDto
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof OracleEntityDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof OracleEntityDto
     */
    'address': string;
    /**
     * 
     * @type {string}
     * @memberof OracleEntityDto
     */
    'price': string;
    /**
     * 
     * @type {number}
     * @memberof OracleEntityDto
     */
    'decimals': number;
}
/**
 * 
 * @export
 * @interface PositionRichResponseDto
 */
export interface PositionRichResponseDto {
    /**
     * 
     * @type {number}
     * @memberof PositionRichResponseDto
     */
    'id': number;
    /**
     * 
     * @type {number}
     * @memberof PositionRichResponseDto
     */
    'chainId': number;
    /**
     * 
     * @type {number}
     * @memberof PositionRichResponseDto
     */
    'positionId': number;
    /**
     * 
     * @type {string}
     * @memberof PositionRichResponseDto
     */
    'owner': string;
    /**
     * 
     * @type {string}
     * @memberof PositionRichResponseDto
     */
    'startTime': string;
    /**
     * 
     * @type {string}
     * @memberof PositionRichResponseDto
     */
    'endTime': string;
    /**
     * 
     * @type {string}
     * @memberof PositionRichResponseDto
     */
    'startPrice': string;
    /**
     * 
     * @type {string}
     * @memberof PositionRichResponseDto
     */
    'endPrice': string;
    /**
     * 
     * @type {string}
     * @memberof PositionRichResponseDto
     */
    'deviationPrice': string;
    /**
     * 
     * @type {string}
     * @memberof PositionRichResponseDto
     */
    'amountCreator': string;
    /**
     * 
     * @type {string}
     * @memberof PositionRichResponseDto
     */
    'amountAccepter': string;
    /**
     * 
     * @type {string}
     * @memberof PositionRichResponseDto
     */
    'status': PositionRichResponseDtoStatusEnum;
    /**
     * 
     * @type {number}
     * @memberof PositionRichResponseDto
     */
    'orderId': number;
    /**
     * 
     * @type {string}
     * @memberof PositionRichResponseDto
     */
    'winner': string;
    /**
     * 
     * @type {boolean}
     * @memberof PositionRichResponseDto
     */
    'isCreatorWinner': boolean;
    /**
     * 
     * @type {GetOrderDto}
     * @memberof PositionRichResponseDto
     */
    'order': GetOrderDto;
    /**
     * 
     * @type {AutoResolveSnapshotEntityDto}
     * @memberof PositionRichResponseDto
     */
    'autoResolveSnapshot'?: AutoResolveSnapshotEntityDto;
}

export const PositionRichResponseDtoStatusEnum = {
    Pending: 'pending',
    Executed: 'executed',
    Canceled: 'canceled'
} as const;

export type PositionRichResponseDtoStatusEnum = typeof PositionRichResponseDtoStatusEnum[keyof typeof PositionRichResponseDtoStatusEnum];

/**
 * 
 * @export
 * @interface StatsPositionDto
 */
export interface StatsPositionDto {
    /**
     * 
     * @type {number}
     * @memberof StatsPositionDto
     */
    'closed': number;
    /**
     * 
     * @type {number}
     * @memberof StatsPositionDto
     */
    'pending': number;
}
/**
 * 
 * @export
 * @interface TeamStatsItem
 */
export interface TeamStatsItem {
    /**
     * 
     * @type {number}
     * @memberof TeamStatsItem
     */
    'id': number;
    /**
     * 
     * @type {number}
     * @memberof TeamStatsItem
     */
    'membersCount': number;
    /**
     * 
     * @type {string}
     * @memberof TeamStatsItem
     */
    'volume': string;
    /**
     * 
     * @type {string}
     * @memberof TeamStatsItem
     */
    'teamId': string;
}
/**
 * 
 * @export
 * @interface TxHashDto
 */
export interface TxHashDto {
    /**
     * 
     * @type {string}
     * @memberof TxHashDto
     */
    'txHash': string;
}
/**
 * 
 * @export
 * @interface WalletStatsChartViewEntityDto
 */
export interface WalletStatsChartViewEntityDto {
    /**
     * 
     * @type {string}
     * @memberof WalletStatsChartViewEntityDto
     */
    'address': string;
    /**
     * 
     * @type {string}
     * @memberof WalletStatsChartViewEntityDto
     */
    'date': string;
    /**
     * 
     * @type {string}
     * @memberof WalletStatsChartViewEntityDto
     */
    'wonSum': string;
    /**
     * 
     * @type {string}
     * @memberof WalletStatsChartViewEntityDto
     */
    'lostSum': string;
}
/**
 * 
 * @export
 * @interface WalletTopTradesResponseDto
 */
export interface WalletTopTradesResponseDto {
    /**
     * 
     * @type {string}
     * @memberof WalletTopTradesResponseDto
     */
    'rank': string;
    /**
     * 
     * @type {string}
     * @memberof WalletTopTradesResponseDto
     */
    'volume': string;
    /**
     * 
     * @type {string}
     * @memberof WalletTopTradesResponseDto
     */
    'profit': string;
    /**
     * 
     * @type {string}
     * @memberof WalletTopTradesResponseDto
     */
    'address': string;
}
/**
 * 
 * @export
 * @interface WalletTradesResponseDto
 */
export interface WalletTradesResponseDto {
    /**
     * 
     * @type {StatsPositionDto}
     * @memberof WalletTradesResponseDto
     */
    'createdPositions': StatsPositionDto;
    /**
     * 
     * @type {StatsPositionDto}
     * @memberof WalletTradesResponseDto
     */
    'againsPositions': StatsPositionDto;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthControllerCheck: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/health`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async healthControllerCheck(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HealthControllerCheck200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.healthControllerCheck(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthControllerCheck(options?: any): AxiosPromise<HealthControllerCheck200Response> {
            return localVarFp.healthControllerCheck(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public healthControllerCheck(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).healthControllerCheck(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ExternalApi - axios parameter creator
 * @export
 */
export const ExternalApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        externalControllerGetOrders: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/external/orders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ExternalApi - functional programming interface
 * @export
 */
export const ExternalApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ExternalApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async externalControllerGetOrders(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetExternalOrdersResponseDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.externalControllerGetOrders(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ExternalApi - factory interface
 * @export
 */
export const ExternalApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ExternalApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        externalControllerGetOrders(options?: any): AxiosPromise<Array<GetExternalOrdersResponseDto>> {
            return localVarFp.externalControllerGetOrders(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ExternalApi - object-oriented interface
 * @export
 * @class ExternalApi
 * @extends {BaseAPI}
 */
export class ExternalApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExternalApi
     */
    public externalControllerGetOrders(options?: AxiosRequestConfig) {
        return ExternalApiFp(this.configuration).externalControllerGetOrders(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * OraclesApi - axios parameter creator
 * @export
 */
export const OraclesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oracleControllerGetOracles: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/oracles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OraclesApi - functional programming interface
 * @export
 */
export const OraclesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OraclesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oracleControllerGetOracles(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetOracleDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.oracleControllerGetOracles(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OraclesApi - factory interface
 * @export
 */
export const OraclesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OraclesApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oracleControllerGetOracles(options?: any): AxiosPromise<Array<GetOracleDto>> {
            return localVarFp.oracleControllerGetOracles(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OraclesApi - object-oriented interface
 * @export
 * @class OraclesApi
 * @extends {BaseAPI}
 */
export class OraclesApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OraclesApi
     */
    public oracleControllerGetOracles(options?: AxiosRequestConfig) {
        return OraclesApiFp(this.configuration).oracleControllerGetOracles(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * OrdersApi - axios parameter creator
 * @export
 */
export const OrdersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {TxHashDto} txHashDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderControllerCloseOrder: async (txHashDto: TxHashDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'txHashDto' is not null or undefined
            assertParamExists('orderControllerCloseOrder', 'txHashDto', txHashDto)
            const localVarPath = `/api/orders/close`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(txHashDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {TxHashDto} txHashDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderControllerCreateOrder: async (txHashDto: TxHashDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'txHashDto' is not null or undefined
            assertParamExists('orderControllerCreateOrder', 'txHashDto', txHashDto)
            const localVarPath = `/api/orders/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(txHashDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {'rate' | 'reserved' | 'available' | 'duration' | 'percent' | 'amount'} [sortingBy] 
         * @param {'ASC' | 'DESC'} [sortingDestination] 
         * @param {number} [skip] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderControllerGetHotOrders: async (sortingBy?: 'rate' | 'reserved' | 'available' | 'duration' | 'percent' | 'amount', sortingDestination?: 'ASC' | 'DESC', skip?: number, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/orders/hot`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sortingBy !== undefined) {
                localVarQueryParameter['sortingBy'] = sortingBy;
            }

            if (sortingDestination !== undefined) {
                localVarQueryParameter['sortingDestination'] = sortingDestination;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderControllerGetOrder: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('orderControllerGetOrder', 'id', id)
            const localVarPath = `/api/orders/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderControllerGetOrderPositions: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('orderControllerGetOrderPositions', 'id', id)
            const localVarPath = `/api/orders/{id}/positions`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Array<number>} [oracleIds] 
         * @param {'rate' | 'reserved' | 'available' | 'duration' | 'percent' | 'amount'} [sortingBy] 
         * @param {'ASC' | 'DESC'} [sortingDestination] 
         * @param {boolean} [closed] 
         * @param {string} [account] 
         * @param {'my_order' | 'all_order'} [orderType] 
         * @param {string} [duration] 
         * @param {string} [percent] 
         * @param {number} [skip] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderControllerGetOrders: async (oracleIds?: Array<number>, sortingBy?: 'rate' | 'reserved' | 'available' | 'duration' | 'percent' | 'amount', sortingDestination?: 'ASC' | 'DESC', closed?: boolean, account?: string, orderType?: 'my_order' | 'all_order', duration?: string, percent?: string, skip?: number, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/orders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (oracleIds) {
                localVarQueryParameter['oracleIds'] = oracleIds;
            }

            if (sortingBy !== undefined) {
                localVarQueryParameter['sortingBy'] = sortingBy;
            }

            if (sortingDestination !== undefined) {
                localVarQueryParameter['sortingDestination'] = sortingDestination;
            }

            if (closed !== undefined) {
                localVarQueryParameter['closed'] = closed;
            }

            if (account !== undefined) {
                localVarQueryParameter['account'] = account;
            }

            if (orderType !== undefined) {
                localVarQueryParameter['orderType'] = orderType;
            }

            if (duration !== undefined) {
                localVarQueryParameter['duration'] = duration;
            }

            if (percent !== undefined) {
                localVarQueryParameter['percent'] = percent;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Array<number>} [oracleIds] 
         * @param {string} [account] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderControllerGetOrdersBook: async (oracleIds?: Array<number>, account?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/orders/book`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (oracleIds) {
                localVarQueryParameter['oracleIds'] = oracleIds;
            }

            if (account !== undefined) {
                localVarQueryParameter['account'] = account;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {TxHashDto} txHashDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderControllerIncreaseOrder: async (txHashDto: TxHashDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'txHashDto' is not null or undefined
            assertParamExists('orderControllerIncreaseOrder', 'txHashDto', txHashDto)
            const localVarPath = `/api/orders/increase`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(txHashDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {TxHashDto} txHashDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderControllerWithdrawOrder: async (txHashDto: TxHashDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'txHashDto' is not null or undefined
            assertParamExists('orderControllerWithdrawOrder', 'txHashDto', txHashDto)
            const localVarPath = `/api/orders/withdraw`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(txHashDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrdersApi - functional programming interface
 * @export
 */
export const OrdersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrdersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {TxHashDto} txHashDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orderControllerCloseOrder(txHashDto: TxHashDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetOrderDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orderControllerCloseOrder(txHashDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {TxHashDto} txHashDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orderControllerCreateOrder(txHashDto: TxHashDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetOrderDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orderControllerCreateOrder(txHashDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {'rate' | 'reserved' | 'available' | 'duration' | 'percent' | 'amount'} [sortingBy] 
         * @param {'ASC' | 'DESC'} [sortingDestination] 
         * @param {number} [skip] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orderControllerGetHotOrders(sortingBy?: 'rate' | 'reserved' | 'available' | 'duration' | 'percent' | 'amount', sortingDestination?: 'ASC' | 'DESC', skip?: number, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<object>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orderControllerGetHotOrders(sortingBy, sortingDestination, skip, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orderControllerGetOrder(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetOrderDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orderControllerGetOrder(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orderControllerGetOrderPositions(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PositionRichResponseDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orderControllerGetOrderPositions(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {Array<number>} [oracleIds] 
         * @param {'rate' | 'reserved' | 'available' | 'duration' | 'percent' | 'amount'} [sortingBy] 
         * @param {'ASC' | 'DESC'} [sortingDestination] 
         * @param {boolean} [closed] 
         * @param {string} [account] 
         * @param {'my_order' | 'all_order'} [orderType] 
         * @param {string} [duration] 
         * @param {string} [percent] 
         * @param {number} [skip] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orderControllerGetOrders(oracleIds?: Array<number>, sortingBy?: 'rate' | 'reserved' | 'available' | 'duration' | 'percent' | 'amount', sortingDestination?: 'ASC' | 'DESC', closed?: boolean, account?: string, orderType?: 'my_order' | 'all_order', duration?: string, percent?: string, skip?: number, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetOrderDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orderControllerGetOrders(oracleIds, sortingBy, sortingDestination, closed, account, orderType, duration, percent, skip, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {Array<number>} [oracleIds] 
         * @param {string} [account] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orderControllerGetOrdersBook(oracleIds?: Array<number>, account?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orderControllerGetOrdersBook(oracleIds, account, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {TxHashDto} txHashDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orderControllerIncreaseOrder(txHashDto: TxHashDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetOrderDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orderControllerIncreaseOrder(txHashDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {TxHashDto} txHashDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orderControllerWithdrawOrder(txHashDto: TxHashDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetOrderDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orderControllerWithdrawOrder(txHashDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OrdersApi - factory interface
 * @export
 */
export const OrdersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrdersApiFp(configuration)
    return {
        /**
         * 
         * @param {TxHashDto} txHashDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderControllerCloseOrder(txHashDto: TxHashDto, options?: any): AxiosPromise<GetOrderDto> {
            return localVarFp.orderControllerCloseOrder(txHashDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TxHashDto} txHashDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderControllerCreateOrder(txHashDto: TxHashDto, options?: any): AxiosPromise<GetOrderDto> {
            return localVarFp.orderControllerCreateOrder(txHashDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {'rate' | 'reserved' | 'available' | 'duration' | 'percent' | 'amount'} [sortingBy] 
         * @param {'ASC' | 'DESC'} [sortingDestination] 
         * @param {number} [skip] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderControllerGetHotOrders(sortingBy?: 'rate' | 'reserved' | 'available' | 'duration' | 'percent' | 'amount', sortingDestination?: 'ASC' | 'DESC', skip?: number, limit?: number, options?: any): AxiosPromise<Array<object>> {
            return localVarFp.orderControllerGetHotOrders(sortingBy, sortingDestination, skip, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderControllerGetOrder(id: number, options?: any): AxiosPromise<GetOrderDto> {
            return localVarFp.orderControllerGetOrder(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderControllerGetOrderPositions(id: number, options?: any): AxiosPromise<Array<PositionRichResponseDto>> {
            return localVarFp.orderControllerGetOrderPositions(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Array<number>} [oracleIds] 
         * @param {'rate' | 'reserved' | 'available' | 'duration' | 'percent' | 'amount'} [sortingBy] 
         * @param {'ASC' | 'DESC'} [sortingDestination] 
         * @param {boolean} [closed] 
         * @param {string} [account] 
         * @param {'my_order' | 'all_order'} [orderType] 
         * @param {string} [duration] 
         * @param {string} [percent] 
         * @param {number} [skip] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderControllerGetOrders(oracleIds?: Array<number>, sortingBy?: 'rate' | 'reserved' | 'available' | 'duration' | 'percent' | 'amount', sortingDestination?: 'ASC' | 'DESC', closed?: boolean, account?: string, orderType?: 'my_order' | 'all_order', duration?: string, percent?: string, skip?: number, limit?: number, options?: any): AxiosPromise<Array<GetOrderDto>> {
            return localVarFp.orderControllerGetOrders(oracleIds, sortingBy, sortingDestination, closed, account, orderType, duration, percent, skip, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Array<number>} [oracleIds] 
         * @param {string} [account] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderControllerGetOrdersBook(oracleIds?: Array<number>, account?: string, options?: any): AxiosPromise<void> {
            return localVarFp.orderControllerGetOrdersBook(oracleIds, account, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TxHashDto} txHashDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderControllerIncreaseOrder(txHashDto: TxHashDto, options?: any): AxiosPromise<GetOrderDto> {
            return localVarFp.orderControllerIncreaseOrder(txHashDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TxHashDto} txHashDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderControllerWithdrawOrder(txHashDto: TxHashDto, options?: any): AxiosPromise<GetOrderDto> {
            return localVarFp.orderControllerWithdrawOrder(txHashDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OrdersApi - object-oriented interface
 * @export
 * @class OrdersApi
 * @extends {BaseAPI}
 */
export class OrdersApi extends BaseAPI {
    /**
     * 
     * @param {TxHashDto} txHashDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public orderControllerCloseOrder(txHashDto: TxHashDto, options?: AxiosRequestConfig) {
        return OrdersApiFp(this.configuration).orderControllerCloseOrder(txHashDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TxHashDto} txHashDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public orderControllerCreateOrder(txHashDto: TxHashDto, options?: AxiosRequestConfig) {
        return OrdersApiFp(this.configuration).orderControllerCreateOrder(txHashDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {'rate' | 'reserved' | 'available' | 'duration' | 'percent' | 'amount'} [sortingBy] 
     * @param {'ASC' | 'DESC'} [sortingDestination] 
     * @param {number} [skip] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public orderControllerGetHotOrders(sortingBy?: 'rate' | 'reserved' | 'available' | 'duration' | 'percent' | 'amount', sortingDestination?: 'ASC' | 'DESC', skip?: number, limit?: number, options?: AxiosRequestConfig) {
        return OrdersApiFp(this.configuration).orderControllerGetHotOrders(sortingBy, sortingDestination, skip, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public orderControllerGetOrder(id: number, options?: AxiosRequestConfig) {
        return OrdersApiFp(this.configuration).orderControllerGetOrder(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public orderControllerGetOrderPositions(id: number, options?: AxiosRequestConfig) {
        return OrdersApiFp(this.configuration).orderControllerGetOrderPositions(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Array<number>} [oracleIds] 
     * @param {'rate' | 'reserved' | 'available' | 'duration' | 'percent' | 'amount'} [sortingBy] 
     * @param {'ASC' | 'DESC'} [sortingDestination] 
     * @param {boolean} [closed] 
     * @param {string} [account] 
     * @param {'my_order' | 'all_order'} [orderType] 
     * @param {string} [duration] 
     * @param {string} [percent] 
     * @param {number} [skip] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public orderControllerGetOrders(oracleIds?: Array<number>, sortingBy?: 'rate' | 'reserved' | 'available' | 'duration' | 'percent' | 'amount', sortingDestination?: 'ASC' | 'DESC', closed?: boolean, account?: string, orderType?: 'my_order' | 'all_order', duration?: string, percent?: string, skip?: number, limit?: number, options?: AxiosRequestConfig) {
        return OrdersApiFp(this.configuration).orderControllerGetOrders(oracleIds, sortingBy, sortingDestination, closed, account, orderType, duration, percent, skip, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Array<number>} [oracleIds] 
     * @param {string} [account] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public orderControllerGetOrdersBook(oracleIds?: Array<number>, account?: string, options?: AxiosRequestConfig) {
        return OrdersApiFp(this.configuration).orderControllerGetOrdersBook(oracleIds, account, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TxHashDto} txHashDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public orderControllerIncreaseOrder(txHashDto: TxHashDto, options?: AxiosRequestConfig) {
        return OrdersApiFp(this.configuration).orderControllerIncreaseOrder(txHashDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TxHashDto} txHashDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public orderControllerWithdrawOrder(txHashDto: TxHashDto, options?: AxiosRequestConfig) {
        return OrdersApiFp(this.configuration).orderControllerWithdrawOrder(txHashDto, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PositionsApi - axios parameter creator
 * @export
 */
export const PositionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {TxHashDto} txHashDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        positionControllerCreatePositionByHash: async (txHashDto: TxHashDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'txHashDto' is not null or undefined
            assertParamExists('positionControllerCreatePositionByHash', 'txHashDto', txHashDto)
            const localVarPath = `/api/positions/accept`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(txHashDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} account 
         * @param {Array<number>} [oracleIds] 
         * @param {'amount_creator' | 'amount_accepter' | 'end_time'} [sortingBy] 
         * @param {'rate' | 'reserved' | 'available' | 'duration' | 'percent' | 'amount'} [sortingOrderBy] 
         * @param {'ASC' | 'DESC'} [sortingDestination] 
         * @param {'active' | 'history'} [type] 
         * @param {number} [skip] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        positionControllerGetPositions: async (account: string, oracleIds?: Array<number>, sortingBy?: 'amount_creator' | 'amount_accepter' | 'end_time', sortingOrderBy?: 'rate' | 'reserved' | 'available' | 'duration' | 'percent' | 'amount', sortingDestination?: 'ASC' | 'DESC', type?: 'active' | 'history', skip?: number, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'account' is not null or undefined
            assertParamExists('positionControllerGetPositions', 'account', account)
            const localVarPath = `/api/positions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (oracleIds) {
                localVarQueryParameter['oracleIds'] = oracleIds;
            }

            if (sortingBy !== undefined) {
                localVarQueryParameter['sortingBy'] = sortingBy;
            }

            if (sortingOrderBy !== undefined) {
                localVarQueryParameter['sortingOrderBy'] = sortingOrderBy;
            }

            if (sortingDestination !== undefined) {
                localVarQueryParameter['sortingDestination'] = sortingDestination;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (account !== undefined) {
                localVarQueryParameter['account'] = account;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} account 
         * @param {'amount_creator' | 'amount_accepter' | 'end_time'} [sortingBy] 
         * @param {'ASC' | 'DESC'} [sortingDestination] 
         * @param {number} [skip] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        positionControllerGetPositionsByOrders: async (account: string, sortingBy?: 'amount_creator' | 'amount_accepter' | 'end_time', sortingDestination?: 'ASC' | 'DESC', skip?: number, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'account' is not null or undefined
            assertParamExists('positionControllerGetPositionsByOrders', 'account', account)
            const localVarPath = `/api/positions/by-orders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sortingBy !== undefined) {
                localVarQueryParameter['sortingBy'] = sortingBy;
            }

            if (sortingDestination !== undefined) {
                localVarQueryParameter['sortingDestination'] = sortingDestination;
            }

            if (account !== undefined) {
                localVarQueryParameter['account'] = account;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PositionsApi - functional programming interface
 * @export
 */
export const PositionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PositionsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {TxHashDto} txHashDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async positionControllerCreatePositionByHash(txHashDto: TxHashDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PositionRichResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.positionControllerCreatePositionByHash(txHashDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} account 
         * @param {Array<number>} [oracleIds] 
         * @param {'amount_creator' | 'amount_accepter' | 'end_time'} [sortingBy] 
         * @param {'rate' | 'reserved' | 'available' | 'duration' | 'percent' | 'amount'} [sortingOrderBy] 
         * @param {'ASC' | 'DESC'} [sortingDestination] 
         * @param {'active' | 'history'} [type] 
         * @param {number} [skip] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async positionControllerGetPositions(account: string, oracleIds?: Array<number>, sortingBy?: 'amount_creator' | 'amount_accepter' | 'end_time', sortingOrderBy?: 'rate' | 'reserved' | 'available' | 'duration' | 'percent' | 'amount', sortingDestination?: 'ASC' | 'DESC', type?: 'active' | 'history', skip?: number, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PositionRichResponseDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.positionControllerGetPositions(account, oracleIds, sortingBy, sortingOrderBy, sortingDestination, type, skip, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} account 
         * @param {'amount_creator' | 'amount_accepter' | 'end_time'} [sortingBy] 
         * @param {'ASC' | 'DESC'} [sortingDestination] 
         * @param {number} [skip] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async positionControllerGetPositionsByOrders(account: string, sortingBy?: 'amount_creator' | 'amount_accepter' | 'end_time', sortingDestination?: 'ASC' | 'DESC', skip?: number, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PositionRichResponseDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.positionControllerGetPositionsByOrders(account, sortingBy, sortingDestination, skip, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PositionsApi - factory interface
 * @export
 */
export const PositionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PositionsApiFp(configuration)
    return {
        /**
         * 
         * @param {TxHashDto} txHashDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        positionControllerCreatePositionByHash(txHashDto: TxHashDto, options?: any): AxiosPromise<PositionRichResponseDto> {
            return localVarFp.positionControllerCreatePositionByHash(txHashDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} account 
         * @param {Array<number>} [oracleIds] 
         * @param {'amount_creator' | 'amount_accepter' | 'end_time'} [sortingBy] 
         * @param {'rate' | 'reserved' | 'available' | 'duration' | 'percent' | 'amount'} [sortingOrderBy] 
         * @param {'ASC' | 'DESC'} [sortingDestination] 
         * @param {'active' | 'history'} [type] 
         * @param {number} [skip] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        positionControllerGetPositions(account: string, oracleIds?: Array<number>, sortingBy?: 'amount_creator' | 'amount_accepter' | 'end_time', sortingOrderBy?: 'rate' | 'reserved' | 'available' | 'duration' | 'percent' | 'amount', sortingDestination?: 'ASC' | 'DESC', type?: 'active' | 'history', skip?: number, limit?: number, options?: any): AxiosPromise<Array<PositionRichResponseDto>> {
            return localVarFp.positionControllerGetPositions(account, oracleIds, sortingBy, sortingOrderBy, sortingDestination, type, skip, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} account 
         * @param {'amount_creator' | 'amount_accepter' | 'end_time'} [sortingBy] 
         * @param {'ASC' | 'DESC'} [sortingDestination] 
         * @param {number} [skip] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        positionControllerGetPositionsByOrders(account: string, sortingBy?: 'amount_creator' | 'amount_accepter' | 'end_time', sortingDestination?: 'ASC' | 'DESC', skip?: number, limit?: number, options?: any): AxiosPromise<Array<PositionRichResponseDto>> {
            return localVarFp.positionControllerGetPositionsByOrders(account, sortingBy, sortingDestination, skip, limit, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PositionsApi - object-oriented interface
 * @export
 * @class PositionsApi
 * @extends {BaseAPI}
 */
export class PositionsApi extends BaseAPI {
    /**
     * 
     * @param {TxHashDto} txHashDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PositionsApi
     */
    public positionControllerCreatePositionByHash(txHashDto: TxHashDto, options?: AxiosRequestConfig) {
        return PositionsApiFp(this.configuration).positionControllerCreatePositionByHash(txHashDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} account 
     * @param {Array<number>} [oracleIds] 
     * @param {'amount_creator' | 'amount_accepter' | 'end_time'} [sortingBy] 
     * @param {'rate' | 'reserved' | 'available' | 'duration' | 'percent' | 'amount'} [sortingOrderBy] 
     * @param {'ASC' | 'DESC'} [sortingDestination] 
     * @param {'active' | 'history'} [type] 
     * @param {number} [skip] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PositionsApi
     */
    public positionControllerGetPositions(account: string, oracleIds?: Array<number>, sortingBy?: 'amount_creator' | 'amount_accepter' | 'end_time', sortingOrderBy?: 'rate' | 'reserved' | 'available' | 'duration' | 'percent' | 'amount', sortingDestination?: 'ASC' | 'DESC', type?: 'active' | 'history', skip?: number, limit?: number, options?: AxiosRequestConfig) {
        return PositionsApiFp(this.configuration).positionControllerGetPositions(account, oracleIds, sortingBy, sortingOrderBy, sortingDestination, type, skip, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} account 
     * @param {'amount_creator' | 'amount_accepter' | 'end_time'} [sortingBy] 
     * @param {'ASC' | 'DESC'} [sortingDestination] 
     * @param {number} [skip] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PositionsApi
     */
    public positionControllerGetPositionsByOrders(account: string, sortingBy?: 'amount_creator' | 'amount_accepter' | 'end_time', sortingDestination?: 'ASC' | 'DESC', skip?: number, limit?: number, options?: AxiosRequestConfig) {
        return PositionsApiFp(this.configuration).positionControllerGetPositionsByOrders(account, sortingBy, sortingDestination, skip, limit, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TeamApi - axios parameter creator
 * @export
 */
export const TeamApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [skip] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamStatsControllerGetTop: async (skip?: number, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/team/stats/top`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TeamApi - functional programming interface
 * @export
 */
export const TeamApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TeamApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} [skip] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async teamStatsControllerGetTop(skip?: number, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetTeamStatsTopResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.teamStatsControllerGetTop(skip, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TeamApi - factory interface
 * @export
 */
export const TeamApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TeamApiFp(configuration)
    return {
        /**
         * 
         * @param {number} [skip] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamStatsControllerGetTop(skip?: number, limit?: number, options?: any): AxiosPromise<GetTeamStatsTopResponseDto> {
            return localVarFp.teamStatsControllerGetTop(skip, limit, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TeamApi - object-oriented interface
 * @export
 * @class TeamApi
 * @extends {BaseAPI}
 */
export class TeamApi extends BaseAPI {
    /**
     * 
     * @param {number} [skip] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamApi
     */
    public teamStatsControllerGetTop(skip?: number, limit?: number, options?: AxiosRequestConfig) {
        return TeamApiFp(this.configuration).teamStatsControllerGetTop(skip, limit, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * WalletApi - axios parameter creator
 * @export
 */
export const WalletApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} wallet 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletStatsControllerGetChart: async (wallet: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'wallet' is not null or undefined
            assertParamExists('walletStatsControllerGetChart', 'wallet', wallet)
            const localVarPath = `/api/wallet/stats/{wallet}/chart`
                .replace(`{${"wallet"}}`, encodeURIComponent(String(wallet)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} wallet 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletStatsControllerGetStats: async (wallet: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'wallet' is not null or undefined
            assertParamExists('walletStatsControllerGetStats', 'wallet', wallet)
            const localVarPath = `/api/wallet/stats/{wallet}`
                .replace(`{${"wallet"}}`, encodeURIComponent(String(wallet)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {'rank' | 'profit' | 'volume'} [sortingBy] 
         * @param {'ASC' | 'DESC'} [sortingDestination] 
         * @param {number} [skip] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletStatsControllerGetTopTrades: async (sortingBy?: 'rank' | 'profit' | 'volume', sortingDestination?: 'ASC' | 'DESC', skip?: number, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/wallet/stats/top/trades`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sortingBy !== undefined) {
                localVarQueryParameter['sortingBy'] = sortingBy;
            }

            if (sortingDestination !== undefined) {
                localVarQueryParameter['sortingDestination'] = sortingDestination;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} wallet 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletStatsControllerGetTrades: async (wallet: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'wallet' is not null or undefined
            assertParamExists('walletStatsControllerGetTrades', 'wallet', wallet)
            const localVarPath = `/api/wallet/stats/{wallet}/trades`
                .replace(`{${"wallet"}}`, encodeURIComponent(String(wallet)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WalletApi - functional programming interface
 * @export
 */
export const WalletApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WalletApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} wallet 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walletStatsControllerGetChart(wallet: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetStatsChartResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walletStatsControllerGetChart(wallet, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} wallet 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walletStatsControllerGetStats(wallet: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetStatsResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walletStatsControllerGetStats(wallet, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {'rank' | 'profit' | 'volume'} [sortingBy] 
         * @param {'ASC' | 'DESC'} [sortingDestination] 
         * @param {number} [skip] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walletStatsControllerGetTopTrades(sortingBy?: 'rank' | 'profit' | 'volume', sortingDestination?: 'ASC' | 'DESC', skip?: number, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WalletTopTradesResponseDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walletStatsControllerGetTopTrades(sortingBy, sortingDestination, skip, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} wallet 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walletStatsControllerGetTrades(wallet: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WalletTradesResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walletStatsControllerGetTrades(wallet, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * WalletApi - factory interface
 * @export
 */
export const WalletApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WalletApiFp(configuration)
    return {
        /**
         * 
         * @param {string} wallet 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletStatsControllerGetChart(wallet: string, options?: any): AxiosPromise<GetStatsChartResponseDto> {
            return localVarFp.walletStatsControllerGetChart(wallet, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} wallet 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletStatsControllerGetStats(wallet: string, options?: any): AxiosPromise<GetStatsResponseDto> {
            return localVarFp.walletStatsControllerGetStats(wallet, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {'rank' | 'profit' | 'volume'} [sortingBy] 
         * @param {'ASC' | 'DESC'} [sortingDestination] 
         * @param {number} [skip] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletStatsControllerGetTopTrades(sortingBy?: 'rank' | 'profit' | 'volume', sortingDestination?: 'ASC' | 'DESC', skip?: number, limit?: number, options?: any): AxiosPromise<Array<WalletTopTradesResponseDto>> {
            return localVarFp.walletStatsControllerGetTopTrades(sortingBy, sortingDestination, skip, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} wallet 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletStatsControllerGetTrades(wallet: string, options?: any): AxiosPromise<WalletTradesResponseDto> {
            return localVarFp.walletStatsControllerGetTrades(wallet, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WalletApi - object-oriented interface
 * @export
 * @class WalletApi
 * @extends {BaseAPI}
 */
export class WalletApi extends BaseAPI {
    /**
     * 
     * @param {string} wallet 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    public walletStatsControllerGetChart(wallet: string, options?: AxiosRequestConfig) {
        return WalletApiFp(this.configuration).walletStatsControllerGetChart(wallet, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} wallet 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    public walletStatsControllerGetStats(wallet: string, options?: AxiosRequestConfig) {
        return WalletApiFp(this.configuration).walletStatsControllerGetStats(wallet, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {'rank' | 'profit' | 'volume'} [sortingBy] 
     * @param {'ASC' | 'DESC'} [sortingDestination] 
     * @param {number} [skip] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    public walletStatsControllerGetTopTrades(sortingBy?: 'rank' | 'profit' | 'volume', sortingDestination?: 'ASC' | 'DESC', skip?: number, limit?: number, options?: AxiosRequestConfig) {
        return WalletApiFp(this.configuration).walletStatsControllerGetTopTrades(sortingBy, sortingDestination, skip, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} wallet 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    public walletStatsControllerGetTrades(wallet: string, options?: AxiosRequestConfig) {
        return WalletApiFp(this.configuration).walletStatsControllerGetTrades(wallet, options).then((request) => request(this.axios, this.basePath));
    }
}


