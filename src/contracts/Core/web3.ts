/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "../types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export declare namespace ICore {
  export type OrderDescriptionStruct =
    | [
      string,
      number | string | BN,
      number | string | BN,
      number | string | BN,
      number | string | BN,
      boolean
    ]
    | {
      oracle: string;
      percent: number | string | BN;
      direction: number | string | BN;
      rate: number | string | BN;
      duration: number | string | BN;
      reinvest: boolean;
    };

  export type OrderDescriptionStructOutputArray = [
    string,
    string,
    string,
    string,
    string,
    boolean
  ];
  export type OrderDescriptionStructOutputStruct = {
    oracle: string;
    percent: string;
    direction: string;
    rate: string;
    duration: string;
    reinvest: boolean;
  };
  export type OrderDescriptionStructOutput = OrderDescriptionStructOutputArray &
    OrderDescriptionStructOutputStruct;

  export type OrderStruct =
    | [
      ICore.OrderDescriptionStruct,
      string,
      number | string | BN,
      number | string | BN,
      number | string | BN,
      boolean
    ]
    | {
      data: ICore.OrderDescriptionStruct;
      creator: string;
      amount: number | string | BN;
      reserved: number | string | BN;
      available: number | string | BN;
      closed: boolean;
    };

  export type OrderStructOutputArray = [
    ICore.OrderDescriptionStructOutput,
    string,
    string,
    string,
    string,
    boolean
  ];
  export type OrderStructOutputStruct = {
    data: ICore.OrderDescriptionStructOutput;
    creator: string;
    amount: string;
    reserved: string;
    available: string;
    closed: boolean;
  };
  export type OrderStructOutput = OrderStructOutputArray &
    OrderStructOutputStruct;

  export type PositionStruct =
    | [
      number | string | BN,
      number | string | BN,
      number | string | BN,
      number | string | BN,
      number | string | BN,
      number | string | BN,
      number | string | BN,
      number | string | BN,
      string,
      boolean,
      number | string | BN
    ]
    | {
      startTime: number | string | BN;
      endTime: number | string | BN;
      startPrice: number | string | BN;
      endPrice: number | string | BN;
      deviationPrice: number | string | BN;
      protocolFee: number | string | BN;
      amountCreator: number | string | BN;
      amountAccepter: number | string | BN;
      winner: string;
      isCreatorWinner: boolean;
      status: number | string | BN;
    };

  export type PositionStructOutputArray = [
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    boolean,
    string
  ];
  export type PositionStructOutputStruct = {
    startTime: string;
    endTime: string;
    startPrice: string;
    endPrice: string;
    deviationPrice: string;
    protocolFee: string;
    amountCreator: string;
    amountAccepter: string;
    winner: string;
    isCreatorWinner: boolean;
    status: string;
  };
  export type PositionStructOutput = PositionStructOutputArray &
    PositionStructOutputStruct;

  export type AcceptStruct =
    | [number | string | BN, number | string | BN, string | number[][]]
    | {
      orderId: number | string | BN;
      amount: number | string | BN;
      updateData: string | number[][];
    };

  export type AcceptStructOutputArray = [string, string, string[]];
  export type AcceptStructOutputStruct = {
    orderId: string;
    amount: string;
    updateData: string[];
  };
  export type AcceptStructOutput = AcceptStructOutputArray &
    AcceptStructOutputStruct;

  export type CountersStruct =
    | [number | string | BN, number | string | BN, number | string | BN]
    | {
      ordersCount: number | string | BN;
      positionsCount: number | string | BN;
      totalStableAmount: number | string | BN;
    };

  export type CountersStructOutputArray = [string, string, string];
  export type CountersStructOutputStruct = {
    ordersCount: string;
    positionsCount: string;
    totalStableAmount: string;
  };
  export type CountersStructOutput = CountersStructOutputArray &
    CountersStructOutputStruct;
}

export declare namespace IFoxifyAffiliation {
  export type NFTDataStruct =
    | [number | string | BN, string | number[], number | string | BN]
    | {
      level: number | string | BN;
      randomValue: string | number[];
      timestamp: number | string | BN;
    };

  export type NFTDataStructOutputArray = [string, string, string];
  export type NFTDataStructOutputStruct = {
    level: string;
    randomValue: string;
    timestamp: string;
  };
  export type NFTDataStructOutput = NFTDataStructOutputArray &
    NFTDataStructOutputStruct;
}

export declare namespace ICoreUtilities {
  export type AffiliationUserDataStruct =
    | [
      number | string | BN,
      number | string | BN,
      number | string | BN,
      IFoxifyAffiliation.NFTDataStruct
    ]
    | {
      activeId: number | string | BN;
      team: number | string | BN;
      discount: number | string | BN;
      nftData: IFoxifyAffiliation.NFTDataStruct;
    };

  export type AffiliationUserDataStructOutputArray = [
    string,
    string,
    string,
    IFoxifyAffiliation.NFTDataStructOutput
  ];
  export type AffiliationUserDataStructOutputStruct = {
    activeId: string;
    team: string;
    discount: string;
    nftData: IFoxifyAffiliation.NFTDataStructOutput;
  };
  export type AffiliationUserDataStructOutput =
    AffiliationUserDataStructOutputArray &
    AffiliationUserDataStructOutputStruct;
}

export type Accepted = ContractEventLog<{
  orderId: string;
  positionId: string;
  order: ICore.OrderStructOutput;
  position: ICore.PositionStructOutput;
  amount: string;
  0: string;
  1: string;
  2: ICore.OrderStructOutput;
  3: ICore.PositionStructOutput;
  4: string;
}>;
export type AutoResolved = ContractEventLog<{
  orderId: string;
  positionId: string;
  winner: string;
  protocolStableFee: string;
  autoResolveFee: string;
  referralID: string;
  affiliation: ICoreUtilities.AffiliationUserDataStructOutput;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
  5: string;
  6: ICoreUtilities.AffiliationUserDataStructOutput;
}>;
export type FeeClaimed = ContractEventLog<{
  amount: string;
  0: string;
}>;
export type Flashloan = ContractEventLog<{
  caller: string;
  receiver: string;
  amount: string;
  fee: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type OrderClosed = ContractEventLog<{
  orderId: string;
  order: ICore.OrderStructOutput;
  0: string;
  1: ICore.OrderStructOutput;
}>;
export type OrderCreated = ContractEventLog<{
  orderId: string;
  order: ICore.OrderStructOutput;
  0: string;
  1: ICore.OrderStructOutput;
}>;
export type OrderIncreased = ContractEventLog<{
  orderId: string;
  amount: string;
  0: string;
  1: string;
}>;
export type OrderWithdrawal = ContractEventLog<{
  orderId: string;
  amount: string;
  0: string;
  1: string;
}>;
export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;

export interface Core extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): Core;
  clone(): Core;
  methods: {
    DIVIDER(): NonPayableTransactionObject<string>;

    accept(
      accepter: string,
      data: ICore.AcceptStruct[]
    ): NonPayableTransactionObject<string[]>;

    autoResolve(
      positionId: number | string | BN,
      updateData: string | number[][]
    ): NonPayableTransactionObject<boolean>;

    availableFeeAmount(): NonPayableTransactionObject<string>;

    claimFee(
      amount: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    closeOrder(
      orderId: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    configuration(): NonPayableTransactionObject<string>;

    counters(): NonPayableTransactionObject<ICore.CountersStructOutput>;

    createOrder(
      creator: string,
      data: ICore.OrderDescriptionStruct,
      amount: number | string | BN
    ): NonPayableTransactionObject<string>;

    creatorOrdersCount(creator: string): NonPayableTransactionObject<string>;

    creatorToOrders(
      arg0: string,
      arg1: number | string | BN
    ): NonPayableTransactionObject<string>;

    flashloan(
      recipient: string,
      amount: number | string | BN,
      data: string | number[]
    ): NonPayableTransactionObject<boolean>;

    increaseOrder(
      orderId: number | string | BN,
      amount: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    orderIdPositionsCount(
      orderId: number | string | BN
    ): NonPayableTransactionObject<string>;

    orderIdToPositions(
      arg0: number | string | BN,
      arg1: number | string | BN
    ): NonPayableTransactionObject<string>;

    orders(
      id: number | string | BN
    ): NonPayableTransactionObject<ICore.OrderStructOutput>;

    owner(): NonPayableTransactionObject<string>;

    permitPeriphery(): NonPayableTransactionObject<string>;

    positionIdToOrderId(
      arg0: number | string | BN
    ): NonPayableTransactionObject<string>;

    positions(
      id: number | string | BN
    ): NonPayableTransactionObject<ICore.PositionStructOutput>;

    renounceOwnership(): NonPayableTransactionObject<void>;

    transferOwnership(newOwner: string): NonPayableTransactionObject<void>;

    withdrawOrder(
      orderId: number | string | BN,
      amount: number | string | BN
    ): NonPayableTransactionObject<boolean>;
  };
  events: {
    Accepted(cb?: Callback<Accepted>): EventEmitter;
    Accepted(options?: EventOptions, cb?: Callback<Accepted>): EventEmitter;

    AutoResolved(cb?: Callback<AutoResolved>): EventEmitter;
    AutoResolved(
      options?: EventOptions,
      cb?: Callback<AutoResolved>
    ): EventEmitter;

    FeeClaimed(cb?: Callback<FeeClaimed>): EventEmitter;
    FeeClaimed(options?: EventOptions, cb?: Callback<FeeClaimed>): EventEmitter;

    Flashloan(cb?: Callback<Flashloan>): EventEmitter;
    Flashloan(options?: EventOptions, cb?: Callback<Flashloan>): EventEmitter;

    OrderClosed(cb?: Callback<OrderClosed>): EventEmitter;
    OrderClosed(
      options?: EventOptions,
      cb?: Callback<OrderClosed>
    ): EventEmitter;

    OrderCreated(cb?: Callback<OrderCreated>): EventEmitter;
    OrderCreated(
      options?: EventOptions,
      cb?: Callback<OrderCreated>
    ): EventEmitter;

    OrderIncreased(cb?: Callback<OrderIncreased>): EventEmitter;
    OrderIncreased(
      options?: EventOptions,
      cb?: Callback<OrderIncreased>
    ): EventEmitter;

    OrderWithdrawal(cb?: Callback<OrderWithdrawal>): EventEmitter;
    OrderWithdrawal(
      options?: EventOptions,
      cb?: Callback<OrderWithdrawal>
    ): EventEmitter;

    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter;
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "Accepted", cb: Callback<Accepted>): void;
  once(event: "Accepted", options: EventOptions, cb: Callback<Accepted>): void;

  once(event: "AutoResolved", cb: Callback<AutoResolved>): void;
  once(
    event: "AutoResolved",
    options: EventOptions,
    cb: Callback<AutoResolved>
  ): void;

  once(event: "FeeClaimed", cb: Callback<FeeClaimed>): void;
  once(
    event: "FeeClaimed",
    options: EventOptions,
    cb: Callback<FeeClaimed>
  ): void;

  once(event: "Flashloan", cb: Callback<Flashloan>): void;
  once(
    event: "Flashloan",
    options: EventOptions,
    cb: Callback<Flashloan>
  ): void;

  once(event: "OrderClosed", cb: Callback<OrderClosed>): void;
  once(
    event: "OrderClosed",
    options: EventOptions,
    cb: Callback<OrderClosed>
  ): void;

  once(event: "OrderCreated", cb: Callback<OrderCreated>): void;
  once(
    event: "OrderCreated",
    options: EventOptions,
    cb: Callback<OrderCreated>
  ): void;

  once(event: "OrderIncreased", cb: Callback<OrderIncreased>): void;
  once(
    event: "OrderIncreased",
    options: EventOptions,
    cb: Callback<OrderIncreased>
  ): void;

  once(event: "OrderWithdrawal", cb: Callback<OrderWithdrawal>): void;
  once(
    event: "OrderWithdrawal",
    options: EventOptions,
    cb: Callback<OrderWithdrawal>
  ): void;

  once(event: "OwnershipTransferred", cb: Callback<OwnershipTransferred>): void;
  once(
    event: "OwnershipTransferred",
    options: EventOptions,
    cb: Callback<OwnershipTransferred>
  ): void;
}
