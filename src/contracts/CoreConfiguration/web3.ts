/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from 'bn.js';
import type { ContractOptions } from 'web3-eth-contract';
import type { EventLog } from 'web3-core';
import type { EventEmitter } from 'events';
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from '../types';

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export declare namespace ICoreConfiguration {
  export type ImmutableConfigurationStruct =
    | [string, string, string, string]
    | {
        blacklist: string;
        affiliation: string;
        positionTokenAccepter: string;
        stable: string;
      };

  export type ImmutableConfigurationStructOutputArray = [
    string,
    string,
    string,
    string
  ];
  export type ImmutableConfigurationStructOutputStruct = {
    blacklist: string;
    affiliation: string;
    positionTokenAccepter: string;
    stable: string;
  };
  export type ImmutableConfigurationStructOutput =
    ImmutableConfigurationStructOutputArray &
      ImmutableConfigurationStructOutputStruct;

  export type NFTDiscountLevelStruct =
    | [number | string | BN, number | string | BN, number | string | BN]
    | {
        bronze: number | string | BN;
        silver: number | string | BN;
        gold: number | string | BN;
      };

  export type NFTDiscountLevelStructOutputArray = [string, string, string];
  export type NFTDiscountLevelStructOutputStruct = {
    bronze: string;
    silver: string;
    gold: string;
  };
  export type NFTDiscountLevelStructOutput = NFTDiscountLevelStructOutputArray &
    NFTDiscountLevelStructOutputStruct;

  export type FeeConfigurationStruct =
    | [string, number | string | BN, number | string | BN, number | string | BN]
    | {
        feeRecipient: string;
        autoResolveFee: number | string | BN;
        protocolFee: number | string | BN;
        flashloanFee: number | string | BN;
      };

  export type FeeConfigurationStructOutputArray = [
    string,
    string,
    string,
    string
  ];
  export type FeeConfigurationStructOutputStruct = {
    feeRecipient: string;
    autoResolveFee: string;
    protocolFee: string;
    flashloanFee: string;
  };
  export type FeeConfigurationStructOutput = FeeConfigurationStructOutputArray &
    FeeConfigurationStructOutputStruct;

  export type LimitsConfigurationStruct =
    | [
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN
      ]
    | {
        minStableAmount: number | string | BN;
        minOrderRate: number | string | BN;
        maxOrderRate: number | string | BN;
        minDuration: number | string | BN;
        maxDuration: number | string | BN;
      };

  export type LimitsConfigurationStructOutputArray = [
    string,
    string,
    string,
    string,
    string
  ];
  export type LimitsConfigurationStructOutputStruct = {
    minStableAmount: string;
    minOrderRate: string;
    maxOrderRate: string;
    minDuration: string;
    maxDuration: string;
  };
  export type LimitsConfigurationStructOutput =
    LimitsConfigurationStructOutputArray &
      LimitsConfigurationStructOutputStruct;

  export type SwapperStruct =
    | [string, string | number[]]
    | { swapperConnector: string; path: string | number[] };

  export type SwapperStructOutputArray = [string, string];
  export type SwapperStructOutputStruct = {
    swapperConnector: string;
    path: string;
  };
  export type SwapperStructOutput = SwapperStructOutputArray &
    SwapperStructOutputStruct;
}

export type DiscountUpdated = ContractEventLog<{
  discount_: ICoreConfiguration.NFTDiscountLevelStructOutput;
  0: ICoreConfiguration.NFTDiscountLevelStructOutput;
}>;
export type FeeConfigurationUpdated = ContractEventLog<{
  config: ICoreConfiguration.FeeConfigurationStructOutput;
  0: ICoreConfiguration.FeeConfigurationStructOutput;
}>;
export type KeepersAdded = ContractEventLog<{
  keepers: string[];
  0: string[];
}>;
export type KeepersRemoved = ContractEventLog<{
  keepers: string[];
  0: string[];
}>;
export type LimitsConfigurationUpdated = ContractEventLog<{
  config: ICoreConfiguration.LimitsConfigurationStructOutput;
  0: ICoreConfiguration.LimitsConfigurationStructOutput;
}>;
export type OraclesAdded = ContractEventLog<{
  oracles: string[];
  0: string[];
}>;
export type OraclesRemoved = ContractEventLog<{
  oracles: string[];
  0: string[];
}>;
export type OraclesWhitelistRemoved = ContractEventLog<{
  oracles: string[];
  0: string[];
}>;
export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;
export type SwapperUpdated = ContractEventLog<{
  swapper: ICoreConfiguration.SwapperStructOutput;
  0: ICoreConfiguration.SwapperStructOutput;
}>;

export interface Oracle extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): Oracle;
  clone(): Oracle;
  methods: {
    DIVIDER(): NonPayableTransactionObject<string>;

    MAX_FLASHLOAN_FEE(): NonPayableTransactionObject<string>;

    MAX_PROTOCOL_FEE(): NonPayableTransactionObject<string>;

    addKeepers(keepers_: string[]): NonPayableTransactionObject<boolean>;

    addOracles(oracles_: string[]): NonPayableTransactionObject<boolean>;

    discount(): NonPayableTransactionObject<
      [string, string, string] & {
        bronze: string;
        silver: string;
        gold: string;
      }
    >;

    feeConfiguration(): NonPayableTransactionObject<
      [string, string, string, string] & {
        feeRecipient: string;
        autoResolveFee: string;
        protocolFee: string;
        flashloanFee: string;
      }
    >;

    immutableConfiguration(): NonPayableTransactionObject<
      [string, string, string, string] & {
        blacklist: string;
        affiliation: string;
        positionTokenAccepter: string;
        stable: string;
      }
    >;

    keepers(index: number | string | BN): NonPayableTransactionObject<string>;

    keepersContains(keeper: string): NonPayableTransactionObject<boolean>;

    keepersCount(): NonPayableTransactionObject<string>;

    limitsConfiguration(): NonPayableTransactionObject<
      [string, string, string, string, string] & {
        minStableAmount: string;
        minOrderRate: string;
        maxOrderRate: string;
        minDuration: string;
        maxDuration: string;
      }
    >;

    oracles(index: number | string | BN): NonPayableTransactionObject<string>;

    oraclesContains(oracle: string): NonPayableTransactionObject<boolean>;

    oraclesCount(): NonPayableTransactionObject<string>;

    oraclesWhitelist(
      index: number | string | BN
    ): NonPayableTransactionObject<string>;

    oraclesWhitelistContains(
      oracle: string
    ): NonPayableTransactionObject<boolean>;

    oraclesWhitelistCount(): NonPayableTransactionObject<string>;

    owner(): NonPayableTransactionObject<string>;

    removeKeepers(keepers_: string[]): NonPayableTransactionObject<boolean>;

    removeOracles(oracles_: string[]): NonPayableTransactionObject<boolean>;

    removeOraclesWhitelist(
      oracles_: string[]
    ): NonPayableTransactionObject<boolean>;

    renounceOwnership(): NonPayableTransactionObject<void>;

    swapper(): NonPayableTransactionObject<
      [string, string] & { connector: string; path: string }
    >;

    transferOwnership(newOwner: string): NonPayableTransactionObject<void>;

    updateDiscount(
      discount_: ICoreConfiguration.NFTDiscountLevelStruct
    ): NonPayableTransactionObject<boolean>;

    updateFeeConfiguration(
      config: ICoreConfiguration.FeeConfigurationStruct
    ): NonPayableTransactionObject<boolean>;

    updateLimitsConfiguration(
      config: ICoreConfiguration.LimitsConfigurationStruct
    ): NonPayableTransactionObject<boolean>;

    updateSwapper(
      swapper_: ICoreConfiguration.SwapperStruct
    ): NonPayableTransactionObject<boolean>;
  };
  events: {
    DiscountUpdated(cb?: Callback<DiscountUpdated>): EventEmitter;
    DiscountUpdated(
      options?: EventOptions,
      cb?: Callback<DiscountUpdated>
    ): EventEmitter;

    FeeConfigurationUpdated(
      cb?: Callback<FeeConfigurationUpdated>
    ): EventEmitter;
    FeeConfigurationUpdated(
      options?: EventOptions,
      cb?: Callback<FeeConfigurationUpdated>
    ): EventEmitter;

    KeepersAdded(cb?: Callback<KeepersAdded>): EventEmitter;
    KeepersAdded(
      options?: EventOptions,
      cb?: Callback<KeepersAdded>
    ): EventEmitter;

    KeepersRemoved(cb?: Callback<KeepersRemoved>): EventEmitter;
    KeepersRemoved(
      options?: EventOptions,
      cb?: Callback<KeepersRemoved>
    ): EventEmitter;

    LimitsConfigurationUpdated(
      cb?: Callback<LimitsConfigurationUpdated>
    ): EventEmitter;
    LimitsConfigurationUpdated(
      options?: EventOptions,
      cb?: Callback<LimitsConfigurationUpdated>
    ): EventEmitter;

    OraclesAdded(cb?: Callback<OraclesAdded>): EventEmitter;
    OraclesAdded(
      options?: EventOptions,
      cb?: Callback<OraclesAdded>
    ): EventEmitter;

    OraclesRemoved(cb?: Callback<OraclesRemoved>): EventEmitter;
    OraclesRemoved(
      options?: EventOptions,
      cb?: Callback<OraclesRemoved>
    ): EventEmitter;

    OraclesWhitelistRemoved(
      cb?: Callback<OraclesWhitelistRemoved>
    ): EventEmitter;
    OraclesWhitelistRemoved(
      options?: EventOptions,
      cb?: Callback<OraclesWhitelistRemoved>
    ): EventEmitter;

    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter;
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>
    ): EventEmitter;

    SwapperUpdated(cb?: Callback<SwapperUpdated>): EventEmitter;
    SwapperUpdated(
      options?: EventOptions,
      cb?: Callback<SwapperUpdated>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: 'DiscountUpdated', cb: Callback<DiscountUpdated>): void;
  once(
    event: 'DiscountUpdated',
    options: EventOptions,
    cb: Callback<DiscountUpdated>
  ): void;

  once(
    event: 'FeeConfigurationUpdated',
    cb: Callback<FeeConfigurationUpdated>
  ): void;
  once(
    event: 'FeeConfigurationUpdated',
    options: EventOptions,
    cb: Callback<FeeConfigurationUpdated>
  ): void;

  once(event: 'KeepersAdded', cb: Callback<KeepersAdded>): void;
  once(
    event: 'KeepersAdded',
    options: EventOptions,
    cb: Callback<KeepersAdded>
  ): void;

  once(event: 'KeepersRemoved', cb: Callback<KeepersRemoved>): void;
  once(
    event: 'KeepersRemoved',
    options: EventOptions,
    cb: Callback<KeepersRemoved>
  ): void;

  once(
    event: 'LimitsConfigurationUpdated',
    cb: Callback<LimitsConfigurationUpdated>
  ): void;
  once(
    event: 'LimitsConfigurationUpdated',
    options: EventOptions,
    cb: Callback<LimitsConfigurationUpdated>
  ): void;

  once(event: 'OraclesAdded', cb: Callback<OraclesAdded>): void;
  once(
    event: 'OraclesAdded',
    options: EventOptions,
    cb: Callback<OraclesAdded>
  ): void;

  once(event: 'OraclesRemoved', cb: Callback<OraclesRemoved>): void;
  once(
    event: 'OraclesRemoved',
    options: EventOptions,
    cb: Callback<OraclesRemoved>
  ): void;

  once(
    event: 'OraclesWhitelistRemoved',
    cb: Callback<OraclesWhitelistRemoved>
  ): void;
  once(
    event: 'OraclesWhitelistRemoved',
    options: EventOptions,
    cb: Callback<OraclesWhitelistRemoved>
  ): void;

  once(event: 'OwnershipTransferred', cb: Callback<OwnershipTransferred>): void;
  once(
    event: 'OwnershipTransferred',
    options: EventOptions,
    cb: Callback<OwnershipTransferred>
  ): void;

  once(event: 'SwapperUpdated', cb: Callback<SwapperUpdated>): void;
  once(
    event: 'SwapperUpdated',
    options: EventOptions,
    cb: Callback<SwapperUpdated>
  ): void;
}
