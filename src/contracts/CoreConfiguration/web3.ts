/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "../types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type DiscountUpdated = ContractEventLog<{
  discount_: [string, string, string];
  0: [string, string, string];
}>;
export type FeeConfigurationUpdated = ContractEventLog<{
  config: [string, string, string, string];
  0: [string, string, string, string];
}>;
export type KeepersAdded = ContractEventLog<{
  keepers: string[];
  0: string[];
}>;
export type KeepersRemoved = ContractEventLog<{
  keepers: string[];
  0: string[];
}>;
export type LimitsConfigurationUpdated = ContractEventLog<{
  config: [string, string, string, string, string, string];
  0: [string, string, string, string, string, string];
}>;
export type OraclesAdded = ContractEventLog<{
  oracles: string[];
  0: string[];
}>;
export type OraclesRemoved = ContractEventLog<{
  oracles: string[];
  0: string[];
}>;
export type OraclesWhitelistRemoved = ContractEventLog<{
  oracles: string[];
  0: string[];
}>;
export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;
export type SwapperUpdated = ContractEventLog<{
  swapper: [string, string];
  0: [string, string];
}>;

export interface CoreConfiguration extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): CoreConfiguration;
  clone(): CoreConfiguration;
  methods: {
    DIVIDER(): NonPayableTransactionObject<string>;

    MAX_FLASHLOAN_FEE(): NonPayableTransactionObject<string>;

    MAX_PROTOCOL_FEE(): NonPayableTransactionObject<string>;

    addKeepers(keepers_: string[]): NonPayableTransactionObject<boolean>;

    addOracles(oracles_: string[]): NonPayableTransactionObject<boolean>;

    discount(): NonPayableTransactionObject<{
      bronze: string;
      silver: string;
      gold: string;
      0: string;
      1: string;
      2: string;
    }>;

    feeConfiguration(): NonPayableTransactionObject<{
      feeRecipient: string;
      autoResolveFee: string;
      protocolFee: string;
      flashloanFee: string;
      0: string;
      1: string;
      2: string;
      3: string;
    }>;

    immutableConfiguration(): NonPayableTransactionObject<{
      blacklist: string;
      referral: string;
      affiliation: string;
      positionTokenAccepter: string;
      stable: string;
      utils: string;
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
      5: string;
    }>;

    keepers(index: number | string | BN): NonPayableTransactionObject<string>;

    keepersContains(keeper: string): NonPayableTransactionObject<boolean>;

    keepersCount(): NonPayableTransactionObject<string>;

    limitsConfiguration(): NonPayableTransactionObject<{
      minKeeperFee: string;
      minOrderRate: string;
      maxOrderRate: string;
      minDuration: string;
      maxDuration: string;
      maxAutoResolveDuration: string;
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
      5: string;
    }>;

    oracles(index: number | string | BN): NonPayableTransactionObject<string>;

    oraclesContains(oracle: string): NonPayableTransactionObject<boolean>;

    oraclesCount(): NonPayableTransactionObject<string>;

    oraclesWhitelist(
      index: number | string | BN
    ): NonPayableTransactionObject<string>;

    oraclesWhitelistContains(
      oracle: string
    ): NonPayableTransactionObject<boolean>;

    oraclesWhitelistCount(): NonPayableTransactionObject<string>;

    owner(): NonPayableTransactionObject<string>;

    removeKeepers(keepers_: string[]): NonPayableTransactionObject<boolean>;

    removeOracles(oracles_: string[]): NonPayableTransactionObject<boolean>;

    removeOraclesWhitelist(
      oracles_: string[]
    ): NonPayableTransactionObject<boolean>;

    renounceOwnership(): NonPayableTransactionObject<void>;

    swapper(): NonPayableTransactionObject<{
      connector: string;
      path: string;
      0: string;
      1: string;
    }>;

    transferOwnership(newOwner: string): NonPayableTransactionObject<void>;

    updateDiscount(
      discount_: [
        number | string | BN,
        number | string | BN,
        number | string | BN
      ]
    ): NonPayableTransactionObject<boolean>;

    updateFeeConfiguration(
      config: [
        string,
        number | string | BN,
        number | string | BN,
        number | string | BN
      ]
    ): NonPayableTransactionObject<boolean>;

    updateLimitsConfiguration(
      config: [
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN
      ]
    ): NonPayableTransactionObject<boolean>;

    updateSwapper(
      swapper_: [string, string | number[]]
    ): NonPayableTransactionObject<boolean>;
  };
  events: {
    DiscountUpdated(cb?: Callback<DiscountUpdated>): EventEmitter;
    DiscountUpdated(
      options?: EventOptions,
      cb?: Callback<DiscountUpdated>
    ): EventEmitter;

    FeeConfigurationUpdated(
      cb?: Callback<FeeConfigurationUpdated>
    ): EventEmitter;
    FeeConfigurationUpdated(
      options?: EventOptions,
      cb?: Callback<FeeConfigurationUpdated>
    ): EventEmitter;

    KeepersAdded(cb?: Callback<KeepersAdded>): EventEmitter;
    KeepersAdded(
      options?: EventOptions,
      cb?: Callback<KeepersAdded>
    ): EventEmitter;

    KeepersRemoved(cb?: Callback<KeepersRemoved>): EventEmitter;
    KeepersRemoved(
      options?: EventOptions,
      cb?: Callback<KeepersRemoved>
    ): EventEmitter;

    LimitsConfigurationUpdated(
      cb?: Callback<LimitsConfigurationUpdated>
    ): EventEmitter;
    LimitsConfigurationUpdated(
      options?: EventOptions,
      cb?: Callback<LimitsConfigurationUpdated>
    ): EventEmitter;

    OraclesAdded(cb?: Callback<OraclesAdded>): EventEmitter;
    OraclesAdded(
      options?: EventOptions,
      cb?: Callback<OraclesAdded>
    ): EventEmitter;

    OraclesRemoved(cb?: Callback<OraclesRemoved>): EventEmitter;
    OraclesRemoved(
      options?: EventOptions,
      cb?: Callback<OraclesRemoved>
    ): EventEmitter;

    OraclesWhitelistRemoved(
      cb?: Callback<OraclesWhitelistRemoved>
    ): EventEmitter;
    OraclesWhitelistRemoved(
      options?: EventOptions,
      cb?: Callback<OraclesWhitelistRemoved>
    ): EventEmitter;

    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter;
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>
    ): EventEmitter;

    SwapperUpdated(cb?: Callback<SwapperUpdated>): EventEmitter;
    SwapperUpdated(
      options?: EventOptions,
      cb?: Callback<SwapperUpdated>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "DiscountUpdated", cb: Callback<DiscountUpdated>): void;
  once(
    event: "DiscountUpdated",
    options: EventOptions,
    cb: Callback<DiscountUpdated>
  ): void;

  once(
    event: "FeeConfigurationUpdated",
    cb: Callback<FeeConfigurationUpdated>
  ): void;
  once(
    event: "FeeConfigurationUpdated",
    options: EventOptions,
    cb: Callback<FeeConfigurationUpdated>
  ): void;

  once(event: "KeepersAdded", cb: Callback<KeepersAdded>): void;
  once(
    event: "KeepersAdded",
    options: EventOptions,
    cb: Callback<KeepersAdded>
  ): void;

  once(event: "KeepersRemoved", cb: Callback<KeepersRemoved>): void;
  once(
    event: "KeepersRemoved",
    options: EventOptions,
    cb: Callback<KeepersRemoved>
  ): void;

  once(
    event: "LimitsConfigurationUpdated",
    cb: Callback<LimitsConfigurationUpdated>
  ): void;
  once(
    event: "LimitsConfigurationUpdated",
    options: EventOptions,
    cb: Callback<LimitsConfigurationUpdated>
  ): void;

  once(event: "OraclesAdded", cb: Callback<OraclesAdded>): void;
  once(
    event: "OraclesAdded",
    options: EventOptions,
    cb: Callback<OraclesAdded>
  ): void;

  once(event: "OraclesRemoved", cb: Callback<OraclesRemoved>): void;
  once(
    event: "OraclesRemoved",
    options: EventOptions,
    cb: Callback<OraclesRemoved>
  ): void;

  once(
    event: "OraclesWhitelistRemoved",
    cb: Callback<OraclesWhitelistRemoved>
  ): void;
  once(
    event: "OraclesWhitelistRemoved",
    options: EventOptions,
    cb: Callback<OraclesWhitelistRemoved>
  ): void;

  once(event: "OwnershipTransferred", cb: Callback<OwnershipTransferred>): void;
  once(
    event: "OwnershipTransferred",
    options: EventOptions,
    cb: Callback<OwnershipTransferred>
  ): void;

  once(event: "SwapperUpdated", cb: Callback<SwapperUpdated>): void;
  once(
    event: "SwapperUpdated",
    options: EventOptions,
    cb: Callback<SwapperUpdated>
  ): void;
}
